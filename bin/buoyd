#!/usr/bin/env node

var _ = require('underscore');
var program = require('commander');
var fs = require('fs');
var Reporter = require(__dirname + '/../lib/reporter');
var Server = require(__dirname + '/../lib/server');
var IntervalBuilder = require(__dirname + '/../lib/builders/interval');
var GitBuilder = require(__dirname + '/../lib/builders/git');
var CampfireNotifier = require(__dirname + '/../lib/notifiers/campfire');
var IobridgeNotifier = require(__dirname + '/../lib/notifiers/iobridge');

program
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .usage('[options]')
  .option('-p, --port <PORT>', 'Port to bind HTTP server to (Default: 8888)', parseInt)
  .option('-g, --git-path <PATH>', 'Specify path to Git checkout to monitor for changes')
  .option('-b, --git-branch <PATH>', 'What branch to monitor for changes? (Default: master)')
  .option('-ghu, --github-url <URL>', 'URL of your Github repository (for linking)')
  .option('-cs, --campfire-subdomain <USERNAME>', 'Subdomain/account for Campfire Notifier')
  .option('-ct, --campfire-token <TOKEN>', 'Token for Campfire Notifier')
  .option('-cr, --campfire-room <ROOM>', 'Room ID for Campfire Notifier')
  .option('-ir, --iobridge-relais <WIDGET_ID>', 'IOBridge Widget ID for Relais output (use , for multiple)')
  .option('-is, --iobridge-sound <WIDGET_ID>', 'IOBridge Widget ID for Sound output')
  .option('-il, --iobridge-lcd <WIDGET_ID>', 'IOBridge Widget ID for LCD output')
  .option('-i, --interval <SECONDS>', 'Run tests periodically', parseInt)
program.name = 'buoyd';
program.parse(process.argv);

var builder = null;

//if(program.gitPath) {
  builder = new GitBuilder({path: program.gitPath, branch: program.gitBranch, githubUrl: program.githubUrl})
//} else {
//  builder = new IntervalBuilder({interval: program.interval});
//}


builder.start();

var port = program.port || 8888;
var server = new Server(builder);

if(program.campfireSubdomain) {
  var campfireNotifier = null;
  campfireNotifier = new CampfireNotifier({subdomain: program.campfireSubdomain, token: program.campfireToken, room: program.campfireRoom});
  campfireNotifier.enable(server);
}

if(program.iobridgeLcd || program.iobridgeRelais || program.iobridgeSound) {
  var iobridgeNotifier = new IobridgeNotifier({
    lcdId: program.iobridgeLcd,
    relaisId: program.iobridgeRelais,
    soundId: program.iobridgeSound
  });
  iobridgeNotifier.enable(server);
}

var httpServer = require('http').createServer(server.app); 
httpServer.listen(port);
console.log("Buoy Server running on port " + port)
